esphome:
  name: esp-daikin-ctrl

  platformio_options:
    board_build.flash_mode: dio

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf
  variant: ESP32C3

# Enable logging
logger:
  level: VERBOSE
  hardware_uart: USB_SERIAL_JTAG
  baud_rate: 2500000

#Enable Home Assistant API
api:

ota:
  platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

external_components:
  - source: components

status_led:
    pin: GPIO4

climate:
  - platform: daikin_ducted
    id: daikin0
    name: "Ducted AC"
    on_state:
      then:
        lambda: |-
          auto call = id(templatefan0).make_call();
          call.set_state(x.mode == climate::CLIMATE_MODE_FAN_ONLY);
          
          if(x.fan_mode == climate::CLIMATE_FAN_LOW)
            call.set_speed(1);
          else if(x.fan_mode == climate::CLIMATE_FAN_MEDIUM)
            call.set_speed(2);
          else if(x.fan_mode == climate::CLIMATE_FAN_HIGH)
            call.set_speed(3);

          if(  id(templatefan0).speed != call.get_speed() 
            || id(templatefan0).state != call.get_state())
            call.perform();

fan:
  - platform: template
    name: "Ducted Fan"
    id: templatefan0
    speed_count: 3
    on_state:
      then:
        lambda: |-
          auto call = id(daikin0).make_call();
          call.set_mode(x->state ? "FAN_ONLY" : "OFF");

          if(id(daikin0).mode != call.get_mode())
            call.perform();
    on_speed_set:
      then:
        lambda: |-
          auto call = id(daikin0).make_call();
          switch(x) {
            case 1: call.set_fan_mode("LOW"); break;
            case 2: call.set_fan_mode("MEDIUM"); break;
            case 3: call.set_fan_mode("HIGH"); break;
            default: break;
          }

          if(id(daikin0).fan_mode != call.get_fan_mode())
            call.perform();